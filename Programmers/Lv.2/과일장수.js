/* [프로그래머스] Lv.2  과일장수
https://school.programmers.co.kr/learn/courses/30/lessons/135808

문제 설명
과일 장수가 사과 상자를 포장하고 있습니다. 사과는 상태에 따라 1점부터 k점까지의 점수로 분류하며, k점이 최상품의 사과이고 1점이 최하품의 사과입니다. 사과 한 상자의 가격은 다음과 같이 결정됩니다.

한 상자에 사과를 m개씩 담아 포장합니다.
상자에 담긴 사과 중 가장 낮은 점수가 p (1 ≤ p ≤ k)점인 경우, 사과 한 상자의 가격은 p * m 입니다.
과일 장수가 가능한 많은 사과를 팔았을 때, 얻을 수 있는 최대 이익을 계산하고자 합니다.(사과는 상자 단위로만 판매하며, 남는 사과는 버립니다)

예를 들어, k = 3, m = 4, 사과 7개의 점수가 [1, 2, 3, 1, 2, 3, 1]이라면, 다음과 같이 [2, 3, 2, 3]으로 구성된 사과 상자 1개를 만들어 판매하여 최대 이익을 얻을 수 있습니다.

(최저 사과 점수) x (한 상자에 담긴 사과 개수) x (상자의 개수) = 2 x 4 x 1 = 8
사과의 최대 점수 k, 한 상자에 들어가는 사과의 수 m, 사과들의 점수 score가 주어졌을 때, 과일 장수가 얻을 수 있는 최대 이익을 return하는 solution 함수를 완성해주세요.

제한사항
3 ≤ k ≤ 9
3 ≤ m ≤ 10
7 ≤ score의 길이 ≤ 1,000,000
1 ≤ score[i] ≤ k
이익이 발생하지 않는 경우에는 0을 return 해주세요.*/

function solution(k, m, score) {
  let answer = 0;
  let index = m - 1;

  score.sort((a, b) => b - a);

  for (let i = 0; i < Math.floor(score.length / m); i++) {
    //(최저 사과 점수) x (한 상자에 담긴 사과 개수)
    answer += score[index] * m;
    index += m;
  }
  return answer;
}

// 1 box = m
//(최저 사과 점수) x (한 상자에 담긴 사과 개수) x (상자의 개수) = 2 x 4 x 1 = 8
// 1 box = 4 개 , 1<= p <=3 ,  [1, 2, 3, 1, 2, 3, 1] -> [3 3 2 2 1 1]-> [2, 3, 2, 3] 최대 이익 내는 사과 점수
// 내림차순 정렬하고 4개 뽑기  내림차순으로 정렬했으니까 최저 사과 점수 m-1번째 인덱스를 셋팅
// 상자갯수 >>> 7/4 = 1, 12/3 = 4
// 최저 점수와 상자에 담긴 개수를 곱하고 앤서에 더 해주기.
// 그 다음 상자의 최저 점수 사과를 고르기 위해 m을 더해준다.
